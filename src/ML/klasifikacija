import numpy as np
import pandas as pd
from sklearn import metrics
import tensorflow as tf
from tensorflow import keras
from sklearn.model_selection import train_test_split
from pandas.api.types import is_string_dtype
from pandas.api.types import is_numeric_dtype
from keras import layers
from keras.losses import MeanSquaredError
from sklearn.preprocessing import LabelEncoder
import category_encoders as ce


df=pd.read_csv("src\ML\Churn_Modelling.csv")

df.head(10)

X=df.drop(labels=["CustomerId","Surname","RowNumber","Exited"],axis=1)

y=df["Exited"]

cat = X.select_dtypes(include='O').keys()
cat
lb=LabelEncoder()
for ime in cat:
    X[ime]=lb.fit_transform(X[ime])


from sklearn.preprocessing import StandardScaler

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2,random_state=0,stratify=y)

scaler=StandardScaler()

X_train=scaler.fit_transform(X_train)
X_test=scaler.fit_transform(X_test)

model=None
model=keras.Sequential()

model.add(layers.Dense(X.shape[1],activation='linear',input_dim=X.shape[1]))
model.add(layers.Dense(128,activation="linear"))
model.add(layers.Dense(32,activation="relu"))
model.add(layers.Dense(1,activation="sigmoid"))

model.compile(optimizer="adam",loss='binary_crossentropy',metrics=['accuracy','AUC'])

model.fit(X_train,y_train.to_numpy(),batch_size=10,epochs=10,verbose=1)









